/*
Signalling Visualisation Toolkit (SiViT)
Copyright (C) 2021  Abertay University

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License or any later
version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package Main;

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.math.RoundingMode;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.JSpinner.DefaultEditor;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

public final class UIManager extends javax.swing.JFrame implements TableModelListener {

    private final CreateEventDialog createEventForm;
    private final MaxSimTimeDialog maxSimTimeDialog;
    private final NumberFormat nf;
    private final DefaultTableModel tm;
    private final ArrayList<Boolean> experimentEvents = new ArrayList<Boolean>(), controlEvents = new ArrayList<Boolean>();

  //   Dimension screenSize;
             
    public ArrayList<Boolean> getControlEvents() {
        return controlEvents;
    }

    public ArrayList<Boolean> getExperimentEvents() {
        return experimentEvents;
    }

    /**
     * Creates new form MainFrame
     * 
     * 
     */
    public UIManager() {
        
//        System.out.println(screenSize.getWidth());
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
        initComponents();
        ((DefaultEditor) jspSpeedCoefficient.getEditor()).getTextField().setEditable(true);
        createEventForm = new CreateEventDialog(this, false);
        maxSimTimeDialog = new MaxSimTimeDialog(this, false);

        nf = NumberFormat.getIntegerInstance();
        nf.setRoundingMode(RoundingMode.FLOOR);
        nf.setMinimumIntegerDigits(2);

        tm = (DefaultTableModel) (this.jTable1.getModel());
        tm.addTableModelListener(this);

        // make sure cleanup works when the window is closed using the 'x' button
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent evt) {
                App.getInstance().exitApplication();
            }
        });

        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UIManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(UIManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(UIManager.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(UIManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        javax.swing.SwingUtilities.updateComponentTreeUI(this);
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtoolbarTimeControl = new javax.swing.JToolBar();
        jtbRun = new javax.swing.JToggleButton();
        jtbLoop = new javax.swing.JToggleButton();
        jlTime = new javax.swing.JLabel();
        jslTime = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jspSpeedCoefficient = new javax.swing.JSpinner();
        jSplitPane1 = new javax.swing.JSplitPane();
        jpViewCanvas = new java.awt.Panel();
        legendPanel = new Main.LegendPanel();
        jpRight = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jbtnAdd = new javax.swing.JButton();
        jbtnDelete = new javax.swing.JButton();
        jMainMenuBar = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiLoadGraph = new javax.swing.JMenuItem();
        jmiSaveImage = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jmiSaveView = new javax.swing.JMenuItem();
        jmiOpenView = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jmiExit = new javax.swing.JMenuItem();
        jmView = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JSeparator();
        jmiConstrain2D = new javax.swing.JCheckBoxMenuItem();
        jmiConstrainSphere = new javax.swing.JCheckBoxMenuItem();
        jmiDynamicLayout = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jmiSpringForceOn = new javax.swing.JCheckBoxMenuItem();
        jmiShuffle = new javax.swing.JMenuItem();
        jmiHome = new javax.swing.JMenuItem();
        jmSettings = new javax.swing.JMenu();
        jmiMaxSimTime = new javax.swing.JMenuItem();
        jmHelp = new javax.swing.JMenu();
        jmiDemoMode = new javax.swing.JCheckBoxMenuItem();
        jmiAbout = new javax.swing.JMenuItem();
        jmiLicence = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jmiConcentrationOutput = new javax.swing.JCheckBoxMenuItem();
        jmiUseThresholds = new javax.swing.JCheckBoxMenuItem();
        jmiNewLighting = new javax.swing.JCheckBoxMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jmiRefreshUI = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SiViT");
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(800, 600));

        jtoolbarTimeControl.setFloatable(false);

        jtbRun.setEnabled(false);
        jtbRun.setFocusable(false);
        jtbRun.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jtbRun.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jtbRun.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jtbRunStateChanged(evt);
            }
        });
        jtbRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbRunActionPerformed(evt);
            }
        });
        jtoolbarTimeControl.add(jtbRun);

        jtbLoop.setEnabled(false);
        jtbLoop.setFocusable(false);
        jtbLoop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jtbLoop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jtoolbarTimeControl.add(jtbLoop);

        jlTime.setText("0.0");
        jtoolbarTimeControl.add(jlTime);

        jslTime.setMajorTickSpacing(60);
        jslTime.setMaximum(600);
        jslTime.setMinorTickSpacing(10);
        jslTime.setPaintTicks(true);
        jslTime.setValue(0);
        jslTime.setEnabled(false);
        jtoolbarTimeControl.add(jslTime);

        jLabel1.setText("Speed x");
        jtoolbarTimeControl.add(jLabel1);

        jspSpeedCoefficient.setModel(new javax.swing.SpinnerNumberModel(500.0d, 0.01d, 1000.0d, 50.0d));
        jspSpeedCoefficient.setMaximumSize(new java.awt.Dimension(50, 15));
        jspSpeedCoefficient.setMinimumSize(new java.awt.Dimension(50, 15));
        jspSpeedCoefficient.setPreferredSize(new java.awt.Dimension(50, 15));
        jtoolbarTimeControl.add(jspSpeedCoefficient);

        jSplitPane1.setResizeWeight(1.0);
        jSplitPane1.setToolTipText("");
        jSplitPane1.setMinimumSize(new java.awt.Dimension(600, 608));

        javax.swing.GroupLayout jpViewCanvasLayout = new javax.swing.GroupLayout(jpViewCanvas);
        jpViewCanvas.setLayout(jpViewCanvasLayout);
        jpViewCanvasLayout.setHorizontalGroup(
            jpViewCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpViewCanvasLayout.createSequentialGroup()
                .addComponent(legendPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 319, Short.MAX_VALUE))
        );
        jpViewCanvasLayout.setVerticalGroup(
            jpViewCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpViewCanvasLayout.createSequentialGroup()
                .addComponent(legendPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 528, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jpViewCanvas);

        jpRight.setMaximumSize(new java.awt.Dimension(325, 606));
        jpRight.setMinimumSize(new java.awt.Dimension(325, 606));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Control", "Experiment", "Species", "Time", "New concentration"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jbtnAdd.setText("Add");
        jbtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddActionPerformed(evt);
            }
        });

        jbtnDelete.setText("Delete");
        jbtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpRightLayout = new javax.swing.GroupLayout(jpRight);
        jpRight.setLayout(jpRightLayout);
        jpRightLayout.setHorizontalGroup(
            jpRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRightLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbtnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                .addComponent(jbtnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jpRightLayout.setVerticalGroup(
            jpRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpRightLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtnDelete)
                    .addComponent(jbtnAdd, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jpRight);

        jMainMenuBar.setDoubleBuffered(true);

        jmFile.setText("File");

        jmiLoadGraph.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jmiLoadGraph.setText("Open Model");
        jmiLoadGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiLoadGraphActionPerformed(evt);
            }
        });
        jmFile.add(jmiLoadGraph);

        jmiSaveImage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jmiSaveImage.setText("Save Image");
        jmiSaveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSaveImageActionPerformed(evt);
            }
        });
        jmFile.add(jmiSaveImage);
        jmFile.add(jSeparator3);

        jmiSaveView.setText("Save View");
        jmiSaveView.setEnabled(false);
        jmiSaveView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSaveViewActionPerformed(evt);
            }
        });
        jmFile.add(jmiSaveView);

        jmiOpenView.setText("Open View");
        jmiOpenView.setEnabled(false);
        jmiOpenView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiOpenViewActionPerformed(evt);
            }
        });
        jmFile.add(jmiOpenView);
        jmFile.add(jSeparator4);

        jmiExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jmiExit.setText("Exit");
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExitActionPerformed(evt);
            }
        });
        jmFile.add(jmiExit);

        jMainMenuBar.add(jmFile);

        jmView.setText("View");
        jmView.add(jSeparator1);

        jmiConstrain2D.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        jmiConstrain2D.setText("Constrain to 2D");
        jmiConstrain2D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiConstrain2DActionPerformed(evt);
            }
        });
        jmView.add(jmiConstrain2D);

        jmiConstrainSphere.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_MASK));
        jmiConstrainSphere.setText("Constrain to Sphere");
        jmiConstrainSphere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiConstrainSphereActionPerformed(evt);
            }
        });
        jmView.add(jmiConstrainSphere);

        jmiDynamicLayout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jmiDynamicLayout.setSelected(true);
        jmiDynamicLayout.setText("Use Dynamic Layout");
        jmiDynamicLayout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDynamicLayoutActionPerformed(evt);
            }
        });
        jmView.add(jmiDynamicLayout);
        jmView.add(jSeparator2);

        jmiSpringForceOn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jmiSpringForceOn.setText("Freeze Layout");
        jmiSpringForceOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSpringForceOnActionPerformed(evt);
            }
        });
        jmView.add(jmiSpringForceOn);

        jmiShuffle.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jmiShuffle.setText("Shuffle Layout");
        jmiShuffle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiShuffleActionPerformed(evt);
            }
        });
        jmView.add(jmiShuffle);

        jmiHome.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jmiHome.setText("Recentre View");
        jmiHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiHomeActionPerformed(evt);
            }
        });
        jmView.add(jmiHome);

        jMainMenuBar.add(jmView);

        jmSettings.setText("Settings");

        jmiMaxSimTime.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jmiMaxSimTime.setText("Max Sim Time");
        jmiMaxSimTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiMaxSimTimeActionPerformed(evt);
            }
        });
        jmSettings.add(jmiMaxSimTime);

        jMainMenuBar.add(jmSettings);

        jmHelp.setText("Help");

        jmiDemoMode.setText("Demo Mode");
        jmiDemoMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDemoModeActionPerformed(evt);
            }
        });
        jmHelp.add(jmiDemoMode);

        jmiAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jmiAbout.setText("About");
        jmiAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAboutActionPerformed(evt);
            }
        });
        jmHelp.add(jmiAbout);

        jmiLicence.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.SHIFT_MASK));
        jmiLicence.setText("Licence Information");
        jmiLicence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiLicenceActionPerformed(evt);
            }
        });
        jmHelp.add(jmiLicence);

        jMainMenuBar.add(jmHelp);

        jMenu1.setText("Debug");

        jmiConcentrationOutput.setText("Concentration Output");
        jMenu1.add(jmiConcentrationOutput);

        jmiUseThresholds.setSelected(true);
        jmiUseThresholds.setText("Use Thresholds");
        jmiUseThresholds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiUseThresholdsActionPerformed(evt);
            }
        });
        jMenu1.add(jmiUseThresholds);

        jmiNewLighting.setSelected(true);
        jmiNewLighting.setText("New Lighting");
        jmiNewLighting.setEnabled(false);
        jmiNewLighting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiNewLightingActionPerformed(evt);
            }
        });
        jMenu1.add(jmiNewLighting);
        jMenu1.add(jSeparator5);

        jmiRefreshUI.setText("Refresh UI");
        jmiRefreshUI.setEnabled(false);
        jMenu1.add(jmiRefreshUI);

        jMainMenuBar.add(jMenu1);

        setJMenuBar(jMainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtoolbarTimeControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jtoolbarTimeControl, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiLoadGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiLoadGraphActionPerformed
        App.getInstance().loadChart();
    }//GEN-LAST:event_jmiLoadGraphActionPerformed

    private void jmiExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExitActionPerformed
        App.getInstance().exitApplication();
    }//GEN-LAST:event_jmiExitActionPerformed

    private void jmiShuffleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiShuffleActionPerformed
        App.getInstance().scrambleGraph();
    }//GEN-LAST:event_jmiShuffleActionPerformed

    private void jmiConstrain2DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiConstrain2DActionPerformed
        App.getInstance().ConstrainTo2D();
    }//GEN-LAST:event_jmiConstrain2DActionPerformed

    private void jmiConstrainSphereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiConstrainSphereActionPerformed
        App.getInstance().ConstrainToSphere();
    }//GEN-LAST:event_jmiConstrainSphereActionPerformed

    private void jmiSaveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSaveImageActionPerformed
        App.getInstance().saveImage();
    }//GEN-LAST:event_jmiSaveImageActionPerformed

    private void jmiAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAboutActionPerformed
        long total = Runtime.getRuntime().totalMemory();
        long free = Runtime.getRuntime().freeMemory();

        JOptionPane.showConfirmDialog(this, "SiViT v0.9.9"
                + "\n© 2021 Abertay University"
                + "\n\n Memory usage: " + (total - free) / 1024 / 1024 + "/" + total / 1024 / 1024 + "mb - " + (total - free) * 100 / total + "%", "About", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_jmiAboutActionPerformed

    private void jmiHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiHomeActionPerformed
        App.getInstance().resetView();
        App.getInstance().recentreChart();
    }//GEN-LAST:event_jmiHomeActionPerformed
    public long startTimeStamp = 0;
    private void jtbRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbRunActionPerformed
       // System.out.println(System.currentTimeMillis());
    }//GEN-LAST:event_jtbRunActionPerformed

    private void jmiSaveViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSaveViewActionPerformed
        App.getInstance().saveChartView();
    }//GEN-LAST:event_jmiSaveViewActionPerformed

    private void jmiOpenViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiOpenViewActionPerformed
        App.getInstance().loadChartView();
    }//GEN-LAST:event_jmiOpenViewActionPerformed

    private void jmiMaxSimTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiMaxSimTimeActionPerformed
        maxSimTimeDialog.openForm(App.getInstance().getModelManager().getMaxSimTime());
    }//GEN-LAST:event_jmiMaxSimTimeActionPerformed

    private void jbtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDeleteActionPerformed
        boolean redoControl = false, redoExperiment = false;
        //System.out.println("UI: deleting event at row #" + this.jTable1.getSelectedRow());
        int n;
        while (this.jTable1.getSelectedRowCount() > 0) {
            n = this.jTable1.getSelectedRow();
            redoControl |= (Boolean) tm.getValueAt(n, 0);
            redoExperiment |= (Boolean) tm.getValueAt(n, 1);
            App.getInstance().deleteInterventionEvent(n);
            controlEvents.remove(n);
            experimentEvents.remove(n);
            tm.removeRow(n);
        }
        if (redoControl) {
            App.getInstance().getControlModelRun().setDirty(true);
        }
        if (redoExperiment) {
            App.getInstance().getExperimentModelRun().setDirty(true);
        }
//         App.getInstance().layoutManager.resetOptimisation(); // added for dynamic layout to force update on events change
    }//GEN-LAST:event_jbtnDeleteActionPerformed

    private void jbtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddActionPerformed
        createEventForm.openForm(App.getInstance().getModelManager().getTime(), this.getLocation(), this.getSize());
    }//GEN-LAST:event_jbtnAddActionPerformed

    private void jmiLicenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiLicenceActionPerformed
        JOptionPane.showConfirmDialog(this, 
                "Signalling Visualisation Toolkit (SiViT)"+
                "\nCopyright © 2021  Abertay University"+
                "\n\n"+
                "This program is free software: you can redistribute it and/or modify"+
                "\nit under the terms of the GNU General Public License as published by"+
                "\nthe Free Software Foundation, either version 3 of the License, or"+
                "\nany later version."+
                "\n\n"+
                "This program is distributed in the hope that it will be useful,"+
                "\nbut WITHOUT ANY WARRANTY; without even the implied warranty of"+
                "\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"+
                "\nGNU General Public License for more details."+
                "\n\n"+
                "You should have received a copy of the GNU General Public License"+
                "\nalong with this program.  If not, see <http://www.gnu.org/licenses/>."
                , "Licence Information", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_jmiLicenceActionPerformed

    private void jmiUseThresholdsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiUseThresholdsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiUseThresholdsActionPerformed

    private void jmiSpringForceOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSpringForceOnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiSpringForceOnActionPerformed

    private void jmiNewLightingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiNewLightingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiNewLightingActionPerformed

    private void jmiDynamicLayoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiDynamicLayoutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiDynamicLayoutActionPerformed

    private void jtbRunStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jtbRunStateChanged

    }//GEN-LAST:event_jtbRunStateChanged

    private void jmiDemoModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiDemoModeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiDemoModeActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMainMenuBar;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbtnAdd;
    private javax.swing.JButton jbtnDelete;
    private javax.swing.JLabel jlTime;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenu jmHelp;
    private javax.swing.JMenu jmSettings;
    public javax.swing.JMenu jmView;
    private javax.swing.JMenuItem jmiAbout;
    private javax.swing.JCheckBoxMenuItem jmiConcentrationOutput;
    private javax.swing.JCheckBoxMenuItem jmiConstrain2D;
    private javax.swing.JCheckBoxMenuItem jmiConstrainSphere;
    private javax.swing.JCheckBoxMenuItem jmiDemoMode;
    private javax.swing.JCheckBoxMenuItem jmiDynamicLayout;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JMenuItem jmiHome;
    private javax.swing.JMenuItem jmiLicence;
    private javax.swing.JMenuItem jmiLoadGraph;
    private javax.swing.JMenuItem jmiMaxSimTime;
    private javax.swing.JCheckBoxMenuItem jmiNewLighting;
    private javax.swing.JMenuItem jmiOpenView;
    private javax.swing.JMenuItem jmiRefreshUI;
    private javax.swing.JMenuItem jmiSaveImage;
    private javax.swing.JMenuItem jmiSaveView;
    private javax.swing.JMenuItem jmiShuffle;
    private javax.swing.JCheckBoxMenuItem jmiSpringForceOn;
    private javax.swing.JCheckBoxMenuItem jmiUseThresholds;
    private javax.swing.JPanel jpRight;
    public java.awt.Panel jpViewCanvas;
    private javax.swing.JSlider jslTime;
    private javax.swing.JSpinner jspSpeedCoefficient;
    private javax.swing.JToggleButton jtbLoop;
    private javax.swing.JToggleButton jtbRun;
    private javax.swing.JToolBar jtoolbarTimeControl;
    private Main.LegendPanel legendPanel;
    // End of variables declaration//GEN-END:variables

    void resetModel() {
        this.jtbRun.setEnabled(true);
        this.jslTime.setEnabled(true);
        // diabled for the experiment
        this.jtbLoop.setEnabled(true);
        this.createEventForm.resetModel();
    }

    boolean getIsTimeSliderAdjusting() {
        return this.jslTime.getValueIsAdjusting();
    }

    boolean isTimeRunning() {
        return this.jtbRun.isSelected();
    }
    
   // boolean prevRunning = false;

    boolean isLooping() {
        return this.jtbLoop.isSelected();
    }

    void setRunning(boolean b) {
        this.jtbRun.setSelected(b);
        //prevRunning = !b;
    }

    void setTime(double time) {
        this.jslTime.setValue((int) (time * 60));

        this.jlTime.setText((int) time + ":" + nf.format((time - (int) time) * 60)); //there must be a better way to display time, but I cannot be bothered atm to find it
    }

    double getTimeSliderFraction() {
        return (double) jslTime.getValue() / jslTime.getMaximum();
    }

    double getSpeedCoefficient() {
        return Double.parseDouble(this.jspSpeedCoefficient.getValue().toString());
    }

    @Override
    public void tableChanged(TableModelEvent e) {
        if (e.getType() == TableModelEvent.UPDATE) {
            if (e.getColumn() == 0) {
                controlEvents.set(e.getFirstRow(), (Boolean) tm.getValueAt(e.getFirstRow(), e.getColumn()));
                App.getInstance().getControlModelRun().setDirty(true);
            } else if (e.getColumn() == 1) {
                experimentEvents.set(e.getFirstRow(), (Boolean) tm.getValueAt(e.getFirstRow(), e.getColumn()));
                App.getInstance().getExperimentModelRun().setDirty(true);
            }
            App.getInstance().layoutManager.resetOptimisation(); // added for dynamic layout to force update on events change
        }
    }

    void addEvent(String id, double value, double time) {
        tm.addRow(new Object[]{false, true, id, time, value});
        controlEvents.add(false);
        experimentEvents.add(true);
        //App.getInstance().layoutManager.resetOptimisation(); // added for dynamic layout to force update on events change
    }

    boolean isViewUpdating() {
        return !jmiSpringForceOn.getState();
    }

    void setWaitingForModel(boolean b) {
        if (b) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            this.jbtnAdd.setEnabled(false);
            this.jbtnDelete.setEnabled(false);
            this.jTable1.setEnabled(false);
        } else {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            this.jbtnAdd.setEnabled(true);
            this.jbtnDelete.setEnabled(true);
            this.jTable1.setEnabled(true);
        }
    }

    public void timeSliderInit() {
        int maxSimTime = (int) App.getInstance().getModelManager().getMaxSimTime();
        this.jslTime.setMaximum(maxSimTime * 60);
        this.jslTime.setMajorTickSpacing(maxSimTime * 6);
        this.jslTime.setMinorTickSpacing(maxSimTime);
    }

    boolean isNewLighting() {
        return this.jmiNewLighting.isSelected();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    boolean isShowOutput() {
        return this.jmiConcentrationOutput.isSelected();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    boolean isUseThresholds() {
        return this.jmiUseThresholds.isSelected();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    boolean useDynamicLayout() {
       return this.jmiDynamicLayout.isSelected();
    }
    
    boolean isDemo(){
        return this.jmiDemoMode.isSelected();
    }
}
